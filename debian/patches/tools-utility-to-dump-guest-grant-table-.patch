From: Dongli Zhang <dongli.zhang@oracle.com>
Date: Mon, 3 Jul 2017 07:34:13 +0800
X-Dgit-Generated: 4.8.3+comet2+shim4.10.0+comet3-1+deb9u5 13ebc27d234fbf57210cb218f685981bb2af9c3b
Subject: tools: utility to dump guest grant table info

As both xen-netfront and xen-blkfront support multi-queue, they would
consume a lot of grant table references when there are many paravirtual
devices and vcpus assigned to guest. Guest domU might panic or hang due to
grant allocation failure when nr_grant_frames in guest has reached its max
value.

This utility would help the administrators to diagnose xen issue. There is
only one command gnttab_query_size so far to monitor the guest grant table
frame usage on dom0 side so that it is not required to debug on guest
kernel side for crash/hang analysis anymore.

It is extensible for adding new commands for more diagnostic functions and
the framework of xen-diag.c is from xen-livepatch.c.

Signed-off-by: Dongli Zhang <dongli.zhang@oracle.com>
Acked-by: Wei Liu <wei.liu2@citrix.com>
(cherry picked from commit df36d82e3fc91bee2ff1681fd438c815fa324b6a)

---

--- xen-4.8.3+comet2+shim4.10.0+comet3.orig/tools/misc/Makefile
+++ xen-4.8.3+comet2+shim4.10.0+comet3/tools/misc/Makefile
@@ -31,6 +31,7 @@ INSTALL_SBIN                   += xenper
 INSTALL_SBIN                   += xenpm
 INSTALL_SBIN                   += xenwatchdogd
 INSTALL_SBIN                   += xen-livepatch
+INSTALL_SBIN                   += xen-diag
 INSTALL_SBIN += $(INSTALL_SBIN-y)
 
 # Everything to be installed in a private bin/
@@ -98,6 +99,9 @@ xenwatchdogd: xenwatchdogd.o
 xen-livepatch: xen-livepatch.o
 	$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS_libxenctrl) $(APPEND_LDFLAGS)
 
+xen-diag: xen-diag.o
+	$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS_libxenctrl) $(APPEND_LDFLAGS)
+
 xen-lowmemd: xen-lowmemd.o
 	$(CC) $(LDFLAGS) -o $@ $< $(LDLIBS_libxenevtchn) $(LDLIBS_libxenctrl) $(LDLIBS_libxenstore) $(APPEND_LDFLAGS)
 
--- /dev/null
+++ xen-4.8.3+comet2+shim4.10.0+comet3/tools/misc/xen-diag.c
@@ -0,0 +1,129 @@
+/*
+ * Copyright (c) 2017 Oracle and/or its affiliates. All rights reserved.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <err.h>
+#include <errno.h>
+#include <unistd.h>
+#include <string.h>
+#include <xenctrl.h>
+
+#include <xen/errno.h>
+#include <xen-tools/libs.h>
+
+static xc_interface *xch;
+
+#define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))
+
+void show_help(void)
+{
+    fprintf(stderr,
+            "xen-diag: xen diagnostic utility\n"
+            "Usage: xen-diag command [args]\n"
+            "Commands:\n"
+            "  help                       display this help\n"
+            "  gnttab_query_size <domid>  dump the current and max grant frames for <domid>\n");
+}
+
+/* wrapper function */
+static int help_func(int argc, char *argv[])
+{
+    show_help();
+    return 0;
+}
+
+static int gnttab_query_size_func(int argc, char *argv[])
+{
+    int domid, rc = 1;
+    struct gnttab_query_size query;
+
+    if ( argc != 1 )
+    {
+        show_help();
+        return rc;
+    }
+
+    domid = strtol(argv[0], NULL, 10);
+    query.dom = domid;
+    rc = xc_gnttab_op(xch, GNTTABOP_query_size, &query, sizeof(query), 1);
+
+    if ( rc == 0 && (query.status == GNTST_okay) )
+        printf("domid=%d: nr_frames=%d, max_nr_frames=%d\n",
+               query.dom, query.nr_frames, query.max_nr_frames);
+
+    return rc == 0 && (query.status == GNTST_okay) ? 0 : 1;
+}
+
+struct {
+    const char *name;
+    int (*function)(int argc, char *argv[]);
+} main_options[] = {
+    { "help", help_func },
+    { "gnttab_query_size", gnttab_query_size_func},
+};
+
+int main(int argc, char *argv[])
+{
+    int ret, i;
+
+    /*
+     * Set stdout to be unbuffered to avoid having to fflush when
+     * printing without a newline.
+     */
+    setvbuf(stdout, NULL, _IONBF, 0);
+
+    if ( argc <= 1 )
+    {
+        show_help();
+        return 0;
+    }
+
+    for ( i = 0; i < ARRAY_SIZE(main_options); i++ )
+        if ( !strncmp(main_options[i].name, argv[1], strlen(argv[1])) )
+            break;
+
+    if ( i == ARRAY_SIZE(main_options) )
+    {
+        show_help();
+        return 0;
+    }
+    else
+    {
+        xch = xc_interface_open(0, 0, 0);
+        if ( !xch )
+        {
+            fprintf(stderr, "failed to get the handler\n");
+            return 0;
+        }
+
+        ret = main_options[i].function(argc - 2, argv + 2);
+
+        xc_interface_close(xch);
+    }
+
+    /*
+     * Exitcode 0 for success.
+     * Exitcode 1 for an error.
+     * Exitcode 2 if the operation should be retried for any reason (e.g. a
+     * timeout or because another operation was in progress).
+     */
+
+#define EXIT_TIMEOUT (EXIT_FAILURE + 1)
+
+    BUILD_BUG_ON(EXIT_SUCCESS != 0);
+    BUILD_BUG_ON(EXIT_FAILURE != 1);
+    BUILD_BUG_ON(EXIT_TIMEOUT != 2);
+
+    switch ( ret )
+    {
+    case 0:
+        return EXIT_SUCCESS;
+    case EAGAIN:
+    case EBUSY:
+        return EXIT_TIMEOUT;
+    default:
+        return EXIT_FAILURE;
+    }
+}
